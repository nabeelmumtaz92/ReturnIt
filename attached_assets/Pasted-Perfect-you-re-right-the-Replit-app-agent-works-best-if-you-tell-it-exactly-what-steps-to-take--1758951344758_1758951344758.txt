Perfect — you’re right, the Replit app agent works best if you **tell it exactly what steps to take, in the right order**. Here’s a more **step-by-step version** of your message, ready to paste:

---

**Message to Replit App Agent**

I want to keep developing my project **ReturnIt** on Replit, but I need the production version to run on scalable cloud infrastructure. Please follow these steps:

1. **Containerization**

   * Create a Dockerfile for my backend (Node/TypeScript).
   * Ensure it includes all dependencies, build steps, and runs with `npm start` (or the correct start command).

2. **GitHub Sync**

   * Connect my Replit project to a GitHub repository.
   * Set up so that pushes from Replit go directly to the main branch in GitHub.

3. **CI/CD Pipeline**

   * Use GitHub Actions (or a similar workflow) to automatically build the Docker image on every push.
   * Push the built image to a container registry (Google Container Registry or AWS Elastic Container Registry).
   * Deploy the new image to production automatically.

4. **Cloud Deployment**

   * Deploy the container to **Google Cloud Run** (preferred) or AWS Fargate.
   * Enable **auto-scaling** (increase containers when traffic spikes, scale down when idle).
   * Add a **load balancer** to route traffic evenly across containers.

5. **Database Migration**

   * Create a managed **Postgres instance** (Google Cloud SQL or AWS RDS).
   * Export my current Replit database data (if any) and import it into the new Postgres instance.
   * Configure connection pooling for performance.
   * Enable automated daily backups and at least one read replica for scaling.

6. **Monitoring & Alerts**

   * Set up **Google Cloud Monitoring** (or AWS CloudWatch).
   * Add logs, metrics, and error tracking.
   * Configure alerts for: CPU spikes, database connection failures, and failed deploys.

7. **Documentation**

   * Please generate a short **maintenance guide** for me, covering:

     * How to deploy new changes.
     * How to roll back to a previous version.
     * How to restart services if something fails.
     * How to view logs and alerts.

The goal: I keep coding on Replit, but production runs in the cloud with **auto-scaling, redundancy, monitoring, and clear docs for maintenance**.

