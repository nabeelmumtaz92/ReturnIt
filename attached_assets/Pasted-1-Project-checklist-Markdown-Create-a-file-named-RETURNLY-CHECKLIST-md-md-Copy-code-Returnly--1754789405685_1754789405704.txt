1) Project checklist (Markdown)
Create a file named RETURNLY_CHECKLIST.md:

md
Copy code
# Returnly Roadmap – Status

## Phase 1 — Foundation (Replit first)
- [ ] 1. Branding locked (logo, palette, tokens)
- [ ] 2. Dev env ready (Expo + RN Web in Replit, Expo Go on phone)
- [ ] 3. Style kit added (`tokens.js`, `styleKit.js`) and verified

## Phase 2 — Core App UI (Customer)
- [ ] 4. Base navigation (Welcome, Login, Book Pickup, Order Status, Driver Portal)
- [ ] 5. Screen shells in place with shared styles

### 5.1 Order Intake (Customer) — REQUIRED FIELDS
- [ ] Name
- [ ] Phone (E.164)
- [ ] Pickup address (addr, apt, city, state, zip)
- [ ] Retailer / store name
- [ ] Return method (store | UPS | FedEx | USPS)
- [ ] Item description
- [ ] Package size (S | M | L)
- [ ] Pickup window (ASAP | time slot)
- [ ] Payment method (stub)
- [ ] Validation for required fields

### 5.2 Order Intake — OPTIONAL
- [ ] Upload receipt image/PDF
- [ ] Upload return label
- [ ] Package photo
- [ ] Special instructions (gate code, fragile)
- [ ] Tip
- [ ] Promo code

## Phase 3 — Refine Design (Figma)
- [ ] 6. Rebuild pixel-perfect screens in Figma with tokens
- [ ] 7. Match code to Figma (spacing/typography polish)

## Phase 4 — Core Logic
- [ ] 8. Zustand store for users & orders
- [ ] 9. Mock flows (create → assign → picked_up → dropped_off → completed/failed)
- [ ] 10. Payments stub (Stripe test mode)

## Phase 5 — Website (same design system)
- [ ] 11. Next.js site using shared tokens
- [ ] 12. “Become a Driver” page + waitlist form

## Phase 6 — Driver App (same brand, different workflow)
- [ ] 13. Screens: Job Queue, Job Detail (actions), Earnings, Profile
- [ ] 14. Big action buttons, photo proof, nav-to-store link

## Phase 7 — Backend & Launch
- [ ] 15. Supabase/Firebase: auth, orders, realtime
- [ ] 16. Push notifications; small-city beta; iterate
2) Simple JSON state the AI can edit
Create returnly_progress.json (Replit AI can toggle status fields):

json
Copy code
{
  "phases": [
    { "id": 1, "task": "Branding locked", "status": "todo" },
    { "id": 2, "task": "Dev env ready (Expo + RN Web, Expo Go)", "status": "todo" },
    { "id": 3, "task": "Style kit added (tokens.js, styleKit.js)", "status": "todo" },

    { "id": 4, "task": "Base navigation (customer app)", "status": "todo" },
    { "id": 5, "task": "Screen shells styled (customer)", "status": "todo" },

    { "id": 51, "task": "Order Intake: required fields + validation", "status": "todo" },
    { "id": 52, "task": "Order Intake: uploads + extras", "status": "todo" },

    { "id": 6, "task": "Figma polish + token sync", "status": "todo" },
    { "id": 7, "task": "Implement Figma spacing/typography", "status": "todo" },

    { "id": 8, "task": "Zustand store (users/orders)", "status": "todo" },
    { "id": 9, "task": "Mock flows (create→assign→picked_up→dropped_off→completed)", "status": "todo" },
    { "id": 10, "task": "Payments stub (Stripe test mode)", "status": "todo" },

    { "id": 11, "task": "Next.js site w/ shared tokens", "status": "todo" },
    { "id": 12, "task": "Become a Driver page + waitlist", "status": "todo" },

    { "id": 13, "task": "Driver app screens (Queue/Detail/Earnings/Profile)", "status": "todo" },
    { "id": 14, "task": "Driver UX (big actions, photo proof, maps)", "status": "todo" },

    { "id": 15, "task": "Backend (Supabase/Firebase) auth+orders+realtime", "status": "todo" },
    { "id": 16, "task": "Push notifications + pilot", "status": "todo" }
  ]
}
3) A short “instructions for AI” file
Create AI_PLAYBOOK.md so Replit’s AI follows our rules and updates the JSON:

md
Copy code
# Returnly – AI Playbook

## Mission
Help build Returnly (customer app + website) using React Native Web (Expo) and Next.js, sharing a single design system (tokens). Keep code plain JS.

## Where to record progress
- Update `RETURNLY_CHECKLIST.md` checkboxes as tasks complete.
- Also update `returnly_progress.json` by changing `"status"` to `"done" | "in_progress" | "todo"`.

## Tech rules
- App: Expo + React Native Web; Navigation = @react-navigation/native + native-stack.
- State: zustand.
- Style system: `tokens.js` + `styleKit.js` (no TS).
- Website: Next.js + Tailwind; mirror tokens (tokens.cjs).
- Keep brand consistent across app & site (package palette).

## Current priority
1) Phase 1 tasks (1–3)
2) Phase 2 tasks (4–5 + 51)
3) When asked, create or modify screens and mark relevant tasks in both files.

## Don’ts
- Don’t convert to TypeScript.
- Don’t change brand tokens without being asked.
- Don’t introduce libs that break web preview.

## Output style
- Minimal diffs, clear file paths, and update the two status files.
