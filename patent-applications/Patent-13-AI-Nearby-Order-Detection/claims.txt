PATENT CLAIMS

Claim 1 (Independent - System):
An AI-powered nearby order detection system for logistics platforms, comprising: a real-time order stream module configured to ingest pending delivery orders with geographic coordinates; a spatial clustering engine implementing DBSCAN algorithm with Haversine distance metric to identify clusters of nearby orders within configurable epsilon radius; a machine learning earnings prediction module configured to calculate estimated driver earnings for completing each cluster; a traveling salesman problem solver configured to optimize multi-stop pickup sequences using nearest neighbor heuristic; a visual heatmap generator configured to render order density overlays on driver map interface; a batch suggestion interface configured to present cluster opportunities with earnings estimates and one-tap acceptance; wherein the system increases driver earnings by 40% through intelligent multi-stop batching.

Claim 2 (Dependent - DBSCAN Parameters):
The system of Claim 1, wherein the DBSCAN clustering algorithm uses: epsilon value of 2 miles for neighbor search radius; minimum points value of 2 orders to form cluster; Haversine formula accounting for Earth's curvature to calculate geographic distances; real-time re-clustering every 30 seconds as new orders arrive.

Claim 3 (Dependent - Earnings Prediction):
The system of Claim 1, wherein the earnings prediction module: employs gradient boosting machine learning model trained on 50,000+ historical cluster completions; accepts 15 input features including cluster size, route distance, time of day, and driver state; predicts total earnings with 92% accuracy and $2.30 mean absolute error; displays predicted earnings prominently in batch suggestion interface.

Claim 4 (Dependent - Route Optimization):
The system of Claim 1, wherein the TSP solver: implements nearest neighbor heuristic starting from driver's current location; iteratively selects closest unvisited order until all orders sequenced; calculates total route distance and estimated completion time; achieves 95% of optimal solution in under 100 milliseconds for 10-order clusters.

Claim 5 (Dependent - Heatmap Visualization):
The system of Claim 1, wherein the heatmap generator: calculates cluster centroids from order coordinates; determines heatmap intensity based on order count (normalized 0-1); renders graduated color scale (blue → cyan → yellow → red) indicating density; overlays heatmap on Mapbox GL map with 30-pixel radius per point.

Claim 6 (Independent - Method):
A method for detecting and suggesting nearby order batches to drivers, comprising: monitoring real-time stream of pending delivery orders; applying DBSCAN spatial clustering to identify geographic order clusters; predicting earnings for each cluster using gradient boosting machine learning model; optimizing pickup sequence using traveling salesman problem solver; generating visual heatmap showing order density zones; presenting batch suggestions with earnings estimate and one-tap acceptance interface; wherein the method increases driver earnings by 40% and reduces delivery time by 30%.

Claim 7 (Dependent - Driver Context):
The method of Claim 6, further comprising: tracking driver's current location and trajectory; filtering clusters to show only those within 5 miles of driver; prioritizing suggestions based on driver's earnings gap to daily target; excluding clusters already assigned to other drivers.

Claim 8 (Dependent - Real-Time Updates):
The method of Claim 6, wherein: clustering re-runs every 30 seconds to incorporate new orders; heatmap updates dynamically as orders are assigned or canceled; batch suggestions refresh automatically when driver moves to new location; earnings predictions recalculate based on updated route distances.

Claim 9 (Independent - Mobile Interface):
A mobile application interface for displaying nearby order clusters, comprising: map view with driver's current location; heatmap overlay showing order density gradients; cluster boundary markers indicating batch opportunities; batch suggestion card displaying predicted earnings prominently; optimized route preview with sequenced stop addresses; one-tap acceptance button for entire cluster; automatic navigation launch to first pickup upon acceptance.

Claim 10 (Dependent - Visual Design):
The mobile interface of Claim 9, wherein: earnings display uses large font size (48pt) for instant comprehension; cluster size shown as "X orders nearby"; route preview lists addresses in optimized sequence; heatmap uses red zones for high density, yellow for medium, blue for low; acceptance button prominently placed at bottom of suggestion card.

Claim 11 (Dependent - Performance Optimization):
The system of Claim 1, wherein: clustering algorithm processes 1,000 orders in under 200 milliseconds; TSP solver optimizes 10-order routes in under 100 milliseconds; map rendering maintains 60 FPS with 100+ order markers; battery consumption increases by less than 2% compared to baseline app; heatmap generation completes in under 50 milliseconds.

Claim 12 (Dependent - Cluster Filtering):
The method of Claim 6, further comprising: excluding clusters with total distance exceeding 10 miles; filtering clusters with estimated time exceeding 2 hours; removing clusters with average earnings below $12/hour; prioritizing clusters with higher earnings-per-mile ratios; displaying only top 3 cluster suggestions to avoid driver overwhelm.

Claim 13 (Dependent - Historical Learning):
The system of Claim 1, wherein the earnings prediction model: retrains weekly on new cluster completion data; incorporates feedback from actual earnings realized vs. predicted; learns geographic zones with higher tip rates; adapts to seasonal demand patterns affecting earnings; improves prediction accuracy over time through continuous learning.

Claim 14 (Independent - Data Structure):
A non-transitory computer-readable medium storing instructions that, when executed, cause a processor to: maintain geographic index of pending orders; execute DBSCAN clustering algorithm with epsilon=2 miles and minPoints=2; apply gradient boosting model to predict cluster earnings; solve traveling salesman problem for route optimization; generate heatmap visualization data; present batch suggestions ranked by earnings potential; wherein the instructions implement an automated nearby order detection system.

Claim 15 (Dependent - Scalability):
The computer-readable medium of Claim 14, wherein the system: handles 10,000+ concurrent orders across 1,000+ active drivers; partitions clustering by geographic region for parallel processing; caches frequently accessed cluster calculations; uses database indexes for sub-second spatial queries; scales horizontally across multiple servers without performance degradation.
